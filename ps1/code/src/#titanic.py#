A"""
Author      : Yi-Chieh Wu, Sriram Sankararaman
Description : Titanic
"""

# Use only the provided packages!
import math
import csv
from util import *
from collections import Counter

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics

######################################################################
# classes
######################################################################

class Classifier(object) :
    """
    Classifier interface.
    """

    def fit(self, X, y):
        raise NotImplementedError()

    def predict(self, X):
        raise NotImplementedError()


class MajorityVoteClassifier(Classifier) :

    def __init__(self) :
        """
        A classifier that always predicts the majority class.

        Attributes
        --------------------
            prediction_ -- majority class
        """
        self.prediction_ = None

    def fit(self, X, y) :
        """
        Build a majority vote classifier from the training set (X, y).

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples
            y    -- numpy array of shape (n,), target classes

        Returns
        --------------------
            self -- an instance of self
        """
        majority_val = Counter(y).most_common(1)[0][0]
        self.prediction_ = majority_val
        return self

    def predict(self, X) :
        """
        Predict class values.

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples

        Returns
        --------------------
            y    -- numpy array of shape (n,), predicted classes
        """
        if self.prediction_ is None :
            raise Exception("Classifier not initialized. Perform a fit first.")

        n,d = X.shape
        y = [self.prediction_] * n
        return y


class RandomClassifier(Classifier) :

    def __init__(self) :
        """
        A classifier that predicts according to the distribution of the classes.

        Attributes
        --------------------
            probabilities_ -- class distribution dict (key = class, val = probability of class)
        """
        self.probabilities_ = None

    def fit(self, X, y) :
        """
        Build a random classifier from the training set (X, y).

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples
            y    -- numpy array of shape (n,), target classes

        Returns
        --------------------
            self -- an instance of self
        """

        ### ========== TODO : START ========== ###
        # part b: set self.probabilities_ according to the training set
        classes=np.unique(y)
        self.probabilities_ = {}
        for element in y:
            if element not in self.probabilities_:
                self.probabilities_[element] = 1
            else:
                self.probabilities_[element] += 1

        n = y.shape[0]
        for class_ in self.probabilities_:
            self.probabilities_[class_] /= float(n)




        ### ========== TODO : END ========== ###

        return self

    def predict(self, X, seed=1234) :
        """
        Predict class values.

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples
            seed -- integer, random seed

        Returns
        --------------------
            y    -- numpy array of shape (n,), predicted classes
        """
        if self.probabilities_ is None :
            raise Exception("Classifier not initialized. Perform a fit first.")
        np.random.seed(seed)

        ### ========== TODO : START ========== ###
        # part b: predict the class for each test example
        # hint: use np.random.choice (be careful of the parameters)
        n,d = X.shape
        y = np.random.choice(list(self.probabilities_.keys()), n, p=list(self.probabilities_.values()))


        ### ========== TODO : END ========== ###

        return y


######################################################################
# functions
######################################################################
def plot_histograms(X, y, Xnames, yname) :
    n,d = X.shape  # n = number of examples, d =  number of features
    fig = plt.figure(figsize=(20,15))
    nrow = 3; ncol = 3
    for i in xrange(d) :
        fig.add_subplot (3,3,i)
        data, bins, align, labels = plot_histogram(X[:,i], y, Xname=Xnames[i], yname=yname, show = False)
        n, bins, patches = plt.hist(data, bins=bins, align=align, alpha=0.5, label=labels)
        plt.xlabel(Xnames[i])
        plt.ylabel('Frequency')
        plt.legend() #plt.legend(loc='upper left')

    plt.savefig ('histograms.pdf')


def plot_histogram(X, y, Xname, yname, show = True) :
    """
    Plots histogram of values in X grouped by y.

    Parameters
    --------------------
        X     -- numpy array of shape (n,d), feature values
        y     -- numpy array of shape (n,), target classes
        Xname -- string, name of feature
        yname -- string, name of target
    """

    # set up data for plotting
    targets = sorted(set(y))
    data = []; labels = []
    for target in targets :
        features = [X[i] for i in xrange(len(y)) if y[i] == target]
        data.append(features)
        labels.append('%s = %s' % (yname, target))

    # set up histogram bins
    features = set(X)
    nfeatures = len(features)
    test_range = range(int(math.floor(min(features))), int(math.ceil(max(features)))+1)
    if nfeatures < 10 and sorted(features) == test_range:
        bins = test_range + [test_range[-1] + 1] # add last bin
        align = 'left'
    else :
        bins = 10
        align = 'mid'

    # plot
    if show == True:
        plt.figure()
        n, bins, patches = plt.hist(data, bins=bins, align=align, alpha=0.5, label=labels)
        plt.xlabel(Xname)
        plt.ylabel('Frequency')
        plt.legend() #plt.legend(loc='upper left')
        plt.show()

    return data, bins, align, labels


def error(clf, X, y, ntrials=100, test_size=0.2) :
    """
    Computes the classifier error over a random split of the data,
    averaged over ntrials runs.

    Parameters
    --------------------
        clf         -- classifier
        X           -- numpy array of shape (n,d), features values
        y           -- numpy array of shape (n,), target classes
        ntrials     -- integer, number of trials

    Returns
    --------------------
        train_error -- float, training error
        test_error  -- float, test error
    """

    ### ========== TODO : START ========== ###
    # compute cross-validation error over ntrials
    # hint: use train_test_split (be careful of the parameters)
    train_error = test_error = 0
    for i in range(ntrials):
        X_train, X_test, y_train, y_test = train_test_split(X, y,
            random_state=i, test_size=test_size)
        clf.fit(X_train, y_train)
        y_train_pred = clf.predict(X_train)
        y_test_pred = clf.predict(X_test)
        train_error += 1 - metrics.accuracy_score(y_train, y_train_pred,
            normalize=True)
        test_error += 1 - metrics.accuracy_score(y_test, y_test_pred,
            normalize=True)
    train_error /= ntrials
    test_error /= ntrials

    ### ========== TODO : END ========== ###

    return train_error, test_error


def write_predictions(y_pred, filename, yname=None) :
    """Write out predictions to csv file."""
    out = open(filename, 'wb')
    f = csv.writer(out)
    if yname :
        f.writerow([yname])
    f.writerows(zip(y_pred))
    out.close()


def depth_errors(X, y, ntrials=100, test_size=0.2):
    depths = []
    training_errors = []
    test_errors = []

    for i in range(1, 21):
        clf = DecisionTreeClassifier(criterion="entropy", splitter="best", max_depth=i)
        train_error, test_error = error(clf, X, y, ntrials, test_size)
        depths.append(i)
        training_errors.append(train_error)
        test_errors.append(test_error)

    return depths, training_errors, test_errors

def size_errors(X, y, ntrials=100, depth=6):
    sizes = []
    training_errors = []
    test_errors = []
    for i in range(1, 20):
        clf = DecisionTreeClassifier(criterion="entropy", splitter="best", max_depth=i)
        train_error, test_error = error(clf, X, y, ntrials, 1 - i * 0.05)
        sizes.append(i * 0.05)
        training_errors.append(train_error)
        test_errors.append(test_error)

    return sizes, training_errors, test_errors


######################################################################
# main
######################################################################

def main():
    # load Titanic dataset
    titanic = load_data("titanic_train.csv", header=1, predict_col=0)
    X = titanic.X; Xnames = titanic.Xnames
    y = titanic.y; yname = titanic.yname
    n,d = X.shape  # n = number of examples, d =  number of features



    #========================================
    # part a: plot histograms of each feature
    #print 'Plotting...'
    #for i in xrange(d) :
    #    plot_histogram(X[:,i], y, Xname=Xnames[i], yname=yname)


    #========================================
    # train Majority Vote classifier on data
    print 'Classifying using Majority Vote...'
    m_clf = MajorityVoteClassifier() # create MajorityVote classifier, which includes all model parameters
    m_clf.fit(X, y)                  # fit training data using the classifier
    y_pred = m_clf.predict(X)       # take the classifier and run it on the training data
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print '\t-- training error: %.3f' % train_error



    ### ========== TODO : START ========== ###
    # part b: evaluate training error of Random classifier
    print 'Classifying using Random...'
    r_clf = RandomClassifier() # create MajorityVote classifier, which includes all model parameters
    r_clf.fit(X, y)                  # fit training data using the classifier
    y_pred = r_clf.predict(X)       # take the classifier and run it on the training data
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print '\t-- training error: %.3f' % train_error

    ### ========== TODO : END ========== ###



    ### ========== TODO : START ========== ###
    # part c: evaluate training error of Decision Tree classifier
    # use criterion of "entropy" for Information gain
    print 'Classifying using Decision Tree...'
    d_clf = DecisionTreeClassifier(criterion="entropy", splitter="best")
    d_clf.fit(X, y)
    y_pred = d_clf.predict(X)
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print '\t-- training error: %.3f' % train_error

    ### ========== TODO : END ========== ###



    # note: uncomment out the following lines to output the Decision Tree graph

    # save the classifier -- requires GraphViz and pydot
    """
    import StringIO, pydot
    from sklearn import tree
    dot_data = StringIO.StringIO()
    tree.export_graphviz(d_clf, out_file=dot_data,
                         feature_names=Xnames)
    graph = pydot.graph_from_dot_data(dot_data.getvalue())
    graph[0].write_pdf("dtree.pdf")
    """


    ### ========== TODO : START ========== ###
    # part d: use cross-validation to compute average training and test error of classifiers
    print 'Investigating various classifiers...'
    m_train_error, m_test_error = error(m_clf, X, y)
    r_train_error, r_test_error = error(r_clf, X, y)
    d_train_error, d_test_error = error(d_clf, X, y)
    print('Majority Vote errors')
    print('\t-- training error: %.3f \t-- test error: %.3f' % (m_train_error,
    m_test_error))
    print('Random errors')
    print('\t-- training error: %.3f \t-- test error: %.3f' % (r_train_error,
    r_test_error))
    print('Decision Tree errors')
    print('\t-- training error: %.3f \t-- test error: %.3f' % (d_train_error,
    d_test_error))
    ### ========== TODO : END ========== ###



    ### ========== TODO : START ========== ###
    # part e: investigate decision tree classifier with various depths
    print 'Investigating depths...'
    """
    depths, training_errors, test_errors = depth_errors(X, y)
    fig, ax = plt.subplots()
    ax.xaxis.set_major_locator(mpl.ticker.MaxNLocator(integer=True))
    ax.plot(depths, test_errors)
    ax.plot(depths, training_errors)
    #plt.axhline(y=m_test_error, color='red')
    #plt.axhline(y=r_train_error, color='black')
    ax.set_title('Error vs Max Depth limit')
    ax.legend(['Test Error','Training Error'])
    #, 'Majority Classifier Test Error',
    # 'Random Classifier Test Error'])
    ax.xaxis.set_label_text('Max Depth limit')
    ax.yaxis.set_label_text('Errors')
    plt.show()
    print('best depth: ' + str(depths[test_errors.index(min(test_errors))]))
    """
    ### ========== TODO : END ========== ###



    ### ========== TODO : START ========== ###
    # part f: investigate decision tree classifier with various training set sizes
    print 'Investigating training set sizes...'
    sizes, training_errors, test_errors = size_errors(X, y)
    fig, ax = plt.subplots()
    ax.plot(sizes, test_errors)
    ax.plot(sizes, training_errors)
    ax.set_title('Error vs. Training set size')
    plt.axhline(y=m_test_error, color='red')
    plt.axhline(y=r_train_error, color='black')
    ax.legend(['Test Error', 'Training Error', 'Majority Error', 'Random Error'])
    ax.xaxis.set_label_text('Training set size')
    ax.yaxis.set_label_text('Errors')
    plt.show()
    ### ========== TODO : END ========== ###


    print 'Done'


if __name__ == "__main__":
    main()
